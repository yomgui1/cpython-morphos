****************************
  What's New In Python 3.2
****************************

:Author: Raymond Hettinger
:Release: |release|
:Date: |today|

.. $Id$
   Rules for maintenance:

   * Anyone can add text to this document.  Do not spend very much time
   on the wording of your changes, because your text will probably
   get rewritten to some degree.

   * The maintainer will go through Misc/NEWS periodically and add
   changes; it's therefore more important to add your changes to
   Misc/NEWS than to this file.

   * This is not a complete list of every single change; completeness
   is the purpose of Misc/NEWS.  Some changes I consider too small
   or esoteric to include.  If such a change is added to the text,
   I'll just remove it.  (This is another reason you shouldn't spend
   too much time on writing your addition.)

   * If you want to draw your new text to the attention of the
   maintainer, add 'XXX' to the beginning of the paragraph or
   section.

   * It's OK to just add a fragmentary note about a change.  For
   example: "XXX Describe the transmogrify() function added to the
   socket module."  The maintainer will research the change and
   write the necessary text.

   * You can comment out your additions if you like, but it's not
   necessary (especially when a final release is some months away).

   * Credit the author of a patch or bugfix.   Just the name is
   sufficient; the e-mail address isn't necessary.

   * It's helpful to add the bug/patch number as a comment:

   % Patch 12345
   XXX Describe the transmogrify() function added to the socket
   module.
   (Contributed by P.Y. Developer.)

   This saves the maintainer the effort of going through the SVN log
   when researching a change.

This article explains the new features in Python 3.2, compared to 3.1.


PEP XXX: Stub
=============


Other Language Changes
======================

Some smaller changes made to the core Python language are:

* Stub


New, Improved, and Deprecated Modules
=====================================

* The :class:`ftplib.FTP` class now supports the context manager protocol
  (Contributed by Tarek Ziadé and Giampaolo Rodolà; :issue:`4972`.)

* The previously deprecated :func:`string.maketrans` function has been
  removed in favor of the static methods, :meth:`bytes.maketrans` and
  :meth:`bytearray.maketrans`.  This change solves the confusion around which
  types were supported by the :mod:`string` module. Now, :class:`str`,
  :class:`bytes`, and :class:`bytearray` each have their own **maketrans** and
  **translate** methods with intermediate translation tables of the
  appropriate type.

  (Contributed by Georg Brandl; :issue:`5675`.)

* The previously deprecated :func:`contextlib.nested` function has been
  removed in favor of a plain :keyword:`with` statement which can
  accept multiple context managers.  The latter technique is faster
  (because it is built-in), and it does a better job finalizing multiple
  context managers when one of them raises an exception.

  (Contributed by Georg Brandl and Mattias Brändström;
  `appspot issue 53094 <http://codereview.appspot.com/53094>`_.)

* The :func:`shutil.copytree` function has two new options:

  * *ignore_dangling_symlinks*: when ``symlinks=False`` (meaning that the
    function copies the file pointed to by the symlink, not the symlink
    itself) this option will silence the error thrown if the file doesn't
    exist.

  * *copy_function*: a callable that will be used to copy files.
    :func:`shutil.copy2` is used by default.

  (Contributed by Tarek Ziade.)

* The *sqlite3* module has some new features:

  * XXX *enable_load_extension*

  * XXX *load_extension*

  * New :class:`~sqlite3.Connection` attribute
    :attr:`~sqlite3.Connection.in_transaction` is :const:`True` when there
    are uncommitted changes, and :const:`False` otherwise.  (Contributed
    by R. David Murray and Shashwat Anand, :issue:`8845`.)


Multi-threading
===============

* The mechanism for serializing execution of concurrently running Python
  threads (generally known as the GIL or Global Interpreter Lock) has been
  rewritten.  Among the objectives were more predictable switching intervals
  and reduced overhead due to lock contention and the number of ensuing
  system calls.  The notion of a "check interval" to allow thread switches
  has been abandoned and replaced by an absolute duration expressed in
  seconds.  This parameter is tunable through :func:`sys.setswitchinterval()`.
  It currently defaults to 5 milliseconds.

  Additional details about the implementation can be read from a `python-dev
  mailing-list message
  <http://mail.python.org/pipermail/python-dev/2009-October/093321.html>`_
  (however, "priority requests" as exposed in this message have not been
  kept for inclusion).

  (Contributed by Antoine Pitrou.)

* Recursive locks (created with the :func:`threading.RLock` API) now benefit
  from a C implementation which makes them as fast as regular locks, and
  between 10x and 15x faster than their previous pure Python implementation.

  (Contributed by Antoine Pitrou; :issue:`3001`.)

* Regular and recursive locks now accept an optional *timeout* argument
  to their ``acquire`` method. (Contributed by Antoine Pitrou; :issue:`7316`)
  Similarly, :meth:`threading.Semaphore.acquire` also gains a *timeout*
  argument. (Contributed by Torsten Landschoff; :issue:`850728`.)


Optimizations
=============

Major performance enhancements have been added:

* Stub

IDLE
====

* Stub


Build and C API Changes
=======================

Changes to Python's build process and to the C API include:

* Stub


Porting to Python 3.2
=====================

This section lists previously described changes and other bugfixes
that may require changes to your code:

* bytearray objects cannot be used anymore as filenames: convert them to bytes

* PyArg_Parse*() functions:

  * "t#" format has been removed: use "s#" or "s*" instead
  * "w" and "w#" formats has been removed: use "w*" instead

